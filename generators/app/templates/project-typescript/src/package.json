{<% var output = projectType == "Library" ? "lib" : "app"; %>
    "name": "<%= name %>",
    "version": "<%= version %>",
    "description": "<%= description %>",
    "main": "<%= output %>/index.ts",
    "scripts": {
        "start": "npm-run-all --parallel test:watch lint:watch <% if (projectType !== "Library") { %>start:app:watch <% } %>type-check:watch",<% if (projectType != "Library") { %>
        "start:app": "./bin/app",
        "start:app:watch": "nodemon --watch app --watch config --watch bin --quiet --ext \".ts,.js,.tsx,.jsx\" --exec 'npm' run start:app",<% } %>
        "type-check": "tsc --noEmit",
        "type-check:watch": "nodemon --watch app --watch config --watch bin --quiet --ext \".ts,.js,.tsx,.jsx\" --exec 'npm' run type-check",
        "test": "mocha -r test/babel-register.js --reporter mocha-multi-reporters --reporter-options configFile=test/config.json --recursive test/**/*.ts",
        "test:watch": "npm run test -- --watch --watch-extensions 'ts'",
        "lint": "esw <%= output %>/**/*.ts",
        "lint:watch": "npm run lint -- --watch",
        "clean-all": "rm -rf ../build node_modules",
        "clean": "rm -rf ../build",

    <% if (environments.length > 0) { %>
        <% environments.forEach(function(environment) { %>
        "build:<%= environment %>": "mkdir -p ../build/package/<%= environment %> && npm-run-all --parallel build:<%= environment %>:app build:<%= environment %>:package build:<%= environment %>:package-lock build:<%= environment %>:copy-files <% if (setupConfig) { %>build:<%= environment %>:config<% } %>",
        "build:<%= environment %>:app": "babel app -d ../build/package/<%= environment %>/app --extensions \".ts,.tsx\"",
        "build:<%= environment %>:package": "jq 'delpaths([[\"devDependencies\"], [\"scripts\"], [\"repository\"]])' package.json > ../build/package/<%= environment %>/package.json",
        "build:<%= environment %>:package-lock": "if [ -f package-lock.json ]; then jq '. + {\"dependencies\": (.dependencies | to_entries | [.[] | select(.value.dev != true)] | from_entries)}' package-lock.json > ../build/package/<%= environment %>/package-lock.json; fi",<% if (setupConfig) { %>
        "build:<%= environment %>:config": "babel config/<%= environment %>.js -d ../build/package/<%= environment %>/config --extensions \".ts,.tsx,.js\"",<% } %>
        "build:<%= environment %>:copy-files": "cp -r ../*.md ../LICENSE ../build/package/<%= environment %> 2>/dev/null || :",
        <% }); %>
        "build": "npm-run-all --parallel <% environments.forEach(function(environment) { %>build:<%= environment %> <% }); %>",
    <% } else { %>
        "build": "mkdir -p ../build/package/ && npm-run-all --parallel build:<%= output %> build:package build:package-lock build:copy-files<% if (setupConfig) { %> build:config<% } %><% if (projectType == "Library") { %> build:types<% } %>",
        "build:<%= output %>": "babel <%= output %> -d ../build/package/<%= output %> --extensions \".ts,.tsx\"",
        "build:package": "jq 'delpaths([[\"devDependencies\"], [\"scripts\"], [\"repository\"]]) + {\"types\": \"lib/index.d.ts\"}' package.json > ../build/package/package.json",
        "build:package-lock": "if [ -f package-lock.json ]; then jq '. + {\"dependencies\": (.dependencies | to_entries | [.[] | select(.value.dev != true)] | from_entries)}' package-lock.json > ../build/package/package-lock.json; fi",<% if (setupConfig) { %>
        "build:config": "babel config/.js -d ../build/package/config --extensions \".ts,.tsx\"",<% } %>
        "build:copy-files": "cp -r ../*.md ../LICENSE ../build/package/ 2>/dev/null || :",<% if (projectType == "Library") { %>
        "build:types": "tsc --emitDeclarationOnly --outDir ../build/package/<%= output %>",<% } %>
    <% } %>

        "prebuild": "npm run clean && mkdir -p ../build/package && npm-run-all --parallel test lint type-check"


    },
    "author": "",
    "license": "",
    "repository": {},
    "bugs": {},
    "devDependencies": {
        "node-jq": "^1.10.3",
        "@babel/cli": "^7.6.0",
        "@babel/core": "^7.6.0",
        "@babel/node": "^7.6.0",
        "@babel/polyfill": "^7.6.0",
        "@babel/register": "^7.6.2",
        "@babel/preset-env": "^7.6.3",
        "@babel/preset-typescript": "^7.6.0",
        "eslint": "^5.9.0",
        "eslint-plugin-import": "^2.8.0",
        "eslint-watch": "^4.0.2",
        "@typescript-eslint/eslint-plugin": "^2.6.0",
        "@typescript-eslint/parser": "^2.6.0",
        "expect": "^24.8.0",
        "mocha": "^5.1.0",
        "mocha-junit-reporter": "^1.16.0",
        "mocha-multi-reporters": "^1.1.7",
        "nodemon": "^1.17.5",
        "npm-run-all": "^4.1.2",

        "typescript": "3.6.4",
        "@types/node": "12.12.3",

        "@types/mocha": "^5.2.7",

        "chai": "^4.2.0",
        "@types/chai": "^4.2.4",

        "chai-as-promised": "^7.1.1",
        "@types/chai-as-promised": "^7.1.2",

        "chai-spies": "^1.0.0",
        "@types/chai-spies": "^1.0.1",

        "chai-string": "^1.5.0",
        "@types/chai-string": "^1.4.2"
    }
}
